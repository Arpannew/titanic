# -*- coding: utf-8 -*-
"""TITANIC_EDA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17M8pg-3zD7nk4Nln_cAZrzQ9ph2Doj8o
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('/content/train.csv')
df.head()

"""### AGE"""

df['Age'].describe()

df['Age'].plot(kind='kde')

df['Age'].skew()

df['Age'].plot(kind='hist',bins=20)

df['Age'].plot(kind='box')

df[df['Age']>65]

df['Age'].isnull().sum()/len(df['Age'])



"""### Fare"""

df['Fare'].describe()

df['Fare'].plot(kind='hist')

df['Fare'].plot(kind='kde')

df['Fare'].skew()

df['Fare'].plot(kind='box')

df[df['Fare']>250]

df['Fare'].isnull().sum()

"""SURVIVED"""

df['Survived'].value_counts()

df['Survived'].value_counts().plot(kind='bar')

df['Survived'].value_counts().plot(kind='pie',autopct='%0.1f%%')

df['Survived'].isnull().sum()

df['Pclass'].value_counts()

df['Pclass'].value_counts().plot(kind='bar')

df['Pclass'].value_counts().plot(kind='pie',autopct='%0.2f%%')

df['Sex'].value_counts()

df['Sex'].value_counts().plot(kind='bar')

df['Sex'].value_counts().plot(kind='pie',autopct='%0.2f%%')

df

pd.crosstab(df['Survived'],df['Pclass'])

pd.crosstab(df['Survived'],df['Pclass'],normalize='columns')*100

sns.heatmap(pd.crosstab(df['Survived'],df['Pclass'],normalize='columns')*100)

pd.crosstab(df['Survived'],df['Sex'])

pd.crosstab(df['Survived'],df['Sex'],normalize='columns')*100

sns.heatmap(pd.crosstab(df['Survived'],df['Sex'],normalize='columns')*100)

pd.crosstab(df['Survived'],df['Embarked'])

pd.crosstab(df['Survived'],df['Embarked'],normalize='columns')*100

sns.heatmap(pd.crosstab(df['Survived'],df['Embarked'],normalize='columns')*100)

pd.crosstab(df['Sex'],df['Embarked'],normalize='columns')*100

pd.crosstab(df['Pclass'],df['Embarked'],normalize='columns')*100

df[df['Survived']==1]['Age'].plot(kind='kde',label='SURVIVED')
df[df['Survived']==0]['Age'].plot(kind='kde',label='NOT SURVIVED')

df[df['Survived']==1]['Age'].plot(kind='kde',label='SURVIVED')
df[df['Survived']==0]['Age'].plot(kind='kde',label='NOT SURVIVED')
plt.legend()

df[df['Survived']==1]['Age'].plot(kind='kde',label='SURVIVED')
df[df['Survived']==0]['Age'].plot(kind='kde',label='NOT SURVIVED')
plt.legend()
plt.show()

df[df['Pclass']==1]['Age'].mean()

df[df['Pclass']==2]['Age'].mean()

df[df['Pclass']==3]['Age'].mean()

df['SibSp'].value_counts()

df[df['SibSp']==8]

df1=pd.read_csv('/content/test.csv')
df1.head()

pd.concat([df,df1])

df[df['Ticket']=='A/5 21171']

df['Individual_fare']=df['Fare']/df['SibSp']+df['Parch']+10

df['Individual_fare'].plot(kind='box')

df['Family_size']=(df['SibSp']+df['Parch']+1)

df

def transform_family_size(num):
  if num ==1:
    return "alone"
  elif num>1 and num<5:
    return "small"
  else:
    return "large"

df['Family_type']=df['Family_size'].apply(transform_family_size)

df

pd.crosstab(df['Survived'],df['Family_type'],normalize='columns')*100

df['Surname']=df['Name'].str.split(',').str.get(0)

df

df['Title']=df['Name'].str.split(',').str.get(1).str.strip().str.split(' ').str.get(0)

df['Title'].value_counts()

